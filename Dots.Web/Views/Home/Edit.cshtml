@model dots.viewModels.OutbreakItemEditViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Outbreak</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.RecordId, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.IsOutbreakDeclared)

        @if (ViewBag.IsAdministrator || ViewBag.IsEditor)
        {
            <div class="row">
                <div class="col-md-5">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.Facility, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-7">

                            @(Html.Kendo().AutoCompleteFor(model => model.Facility)
                              .Filter("startswith")
                              .DataTextField("Name")
                              .BindTo(Model.Facilities)
                              .HtmlAttributes(new { style = "width:95%" }))
                            <br />
                            @Html.ValidationMessageFor(model => model.Facility, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.OutbreakLocation, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">

                            @(Html.Kendo().AutoCompleteFor(model => model.OutbreakLocation)
                              .Filter("startswith")
                              .DataTextField("Name")
                              .BindTo(Model.OutbreakLocations)
                              .HtmlAttributes(new { style = "width:65%" }))
                            <br />
                            @Html.ValidationMessageFor(model => model.OutbreakLocation, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-5">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.FacilityTypeId, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-7">

                            @(Html.Kendo().DropDownListFor(model => model.FacilityTypeId)
                          .DataTextField("Name")
                          .DataValueField("RecordId")
                          .BindTo(Model.FacilityTypes))

                            @Html.ValidationMessageFor(model => model.FacilityTypeId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Pathogen, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">

                            @(Html.Kendo().AutoCompleteFor(model => model.Pathogen)
                          .Filter("startswith")
                          .DataTextField("Name")
                          .BindTo(Model.Pathogens)
                          .HtmlAttributes(new { style = "width:65%" }))

                            @Html.ValidationMessageFor(model => model.Pathogen, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-5">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.CountyId, htmlAttributes: new {@class = "control-label"})
                        </div>
                        <div class="col-md-7">

                            @(Html.Kendo().DropDownListFor(model => model.CountyId)
                                  .DataTextField("Name")
                                  .DataValueField("RecordId")
                                  .BindTo(Model.Counties))

                            @Html.ValidationMessageFor(model => model.CountyId, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.OutbreakDeclaredDate, htmlAttributes: new {@class = "control-label"})
                        </div>
                        <div class="col-md-8">
                            @Html.Kendo().DatePickerFor(model => model.OutbreakDeclaredDate)
                            @Html.ValidationMessageFor(model => model.OutbreakDeclaredDate, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-5">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelFor(model => model.IsOutbreakDeclaredOver, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.IsOutbreakDeclaredOver)
                            @Html.ValidationMessageFor(model => model.IsOutbreakDeclaredOver, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="form-group" id="OutbreakDeclaredOverDateGroup">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.OutbreakDeclaredOverDate, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-8">
                            @Html.Kendo().DatePickerFor(model => model.OutbreakDeclaredOverDate)
                            @Html.ValidationMessageFor(model => model.OutbreakDeclaredOverDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.Facility)
            @Html.HiddenFor(model => model.OutbreakLocation)
            @Html.HiddenFor(model => model.FacilityTypeId)
            @Html.HiddenFor(model => model.Pathogen)
            @Html.HiddenFor(model => model.CountyId)
            @Html.HiddenFor(model => model.OutbreakDeclaredDate)
            @Html.HiddenFor(model => model.OutbreakDeclaredOverDate)
        }

        <div class="row">
            <div class="col-md-5">
                <div class="form-group">
                    <div class="col-md-5">
                        @Html.LabelFor(model => model.IsAdmissionsClosed, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.IsAdmissionsClosed)
                        @Html.ValidationMessageFor(model => model.IsAdmissionsClosed, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-7">
                <div class="form-group" id="AdmissionsCloseDateGroup">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.AdmissionsCloseDate, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.Kendo().DatePickerFor(model => model.AdmissionsCloseDate)
                        @Html.ValidationMessageFor(model => model.AdmissionsCloseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-5">
                <div class="form-group">
                    <div class="col-md-5">
                        @Html.LabelFor(model => model.IsAdmissionsOpened, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.IsAdmissionsOpened)
                        @Html.ValidationMessageFor(model => model.IsAdmissionsOpened, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-7">
                <div class="form-group" id="AdmissionsOpenDateGroup">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.AdmissionsOpenDate, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.Kendo().DatePickerFor(model => model.AdmissionsOpenDate)
                        @Html.ValidationMessageFor(model => model.AdmissionsOpenDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

    @if (ViewBag.IsAdministrator || ViewBag.IsEditor)
    {
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Comment, htmlAttributes: new {@class = "control-label"})
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.Comment, 5, 100, new {@class = "text-area-custom"})
                        <div id="character-count" class="character-count"></div>
                        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">Comments</h4>
                    </div>
                    <div class="panel-body">
                        @if (string.IsNullOrEmpty(Model.Comment))
                        {
                            <div class="text-no-comment">-- No Comment Entered --</div>
                        }
                        else
                        {
                            @Html.DisplayTextFor(model => model.Comment)
                        }
                    </div>
                </div>                        
            </div>
        </div>
    }

    <br />
        <div class="row">
            <div class="col-md-12">
                <input type="submit" value="Save" class="btn btn-primary" />&nbsp;&nbsp;
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            $('[type=checkbox]').each(function (index, element) {
                var testing = '';
                if (element.id === 'IsOutbreakDeclaredOver') {

                    if ($("#IsOutbreakDeclaredOver").attr('checked') === 'checked') {

                        $('#OutbreakDeclaredOverDateGroup').show();
                    } else {
                        $('#OutbreakDeclaredOverDateGroup').hide();
                    }
                } else if (element.id === 'IsAdmissionsClosed') {

                    if ($("#IsAdmissionsClosed").attr('checked') === 'checked') {

                        $('#AdmissionsCloseDateGroup').show();
                    } else {
                        $('#AdmissionsCloseDateGroup').hide();
                    }
                } else if (element.id === 'IsAdmissionsOpened') {

                    if ($("#IsAdmissionsOpened").attr('checked') === 'checked') {

                        $('#AdmissionsOpenDateGroup').show();
                    } else {
                        $('#AdmissionsOpenDateGroup').hide();
                    }
                }
            });

            $('[type=checkbox]').iCheck({
                checkboxClass: 'icheckbox_square-blue',
                radioClass: 'iradio_square-blue',
                increaseArea: '20%' // optional
            }).on('ifChecked', function (event) {
                if (event.target.id === 'IsOutbreakDeclaredOver') {

                    $('#OutbreakDeclaredOverDateGroup').show();
                } else if (event.target.id === 'IsAdmissionsClosed') {

                    $('#AdmissionsCloseDateGroup').show();
                } else if (event.target.id === 'IsAdmissionsOpened') {

                    $('#AdmissionsOpenDateGroup').show();
                }
            }).on('ifUnchecked', function (event) {
                if (event.target.id === 'IsOutbreakDeclaredOver') {

                    $('#OutbreakDeclaredOverDateGroup').hide();
                } else if (event.target.id === 'IsAdmissionsClosed') {

                    $('#AdmissionsCloseDateGroup').hide();
                } else if (event.target.id === 'IsAdmissionsOpened') {

                    $('#AdmissionsOpenDateGroup').hide();
                }
            });

            updateCount();

            $('#Comment').keyup(updateCount);

            function updateCount() {
                var count = $('#Comment').val().length;

                if (count < 150) {
                    $('#character-count').html('Available Characters: <span class="character-count-value-green">' + (200 - count) + '</span>');
                } else if (count >= 150 && count <= 199) {
                    $('#character-count').html('Available Characters: <span class="character-count-value-yellow">' + (200 - count) + '</span>');
                } else if (count >= 200) {
                    $('#character-count').html('Available Characters: <span class="character-count-value-red">' + (200 - count) + '</span>');
                }
            }

        });
    </script>

}
